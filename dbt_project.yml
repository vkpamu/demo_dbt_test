
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'demo_dbt_test'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'snowflake'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
source-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"


# on-run-start: "alter table if exists dbt_test add column source_id number,batch_id varchar"
# on-run-end: ["{{update_source_id()}}","{{update_batch_id()}}"]
on-run-end: "update dbt_test SET source_id =  case when source_id IS NULL then 101 else source_id end;" 



# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  post-hook: "update dbt_test SET batch_id = case when batch_id IS NULL then current_timestamp else batch_id end ;"
  demo_dbt_test:
    +materialized: table
    # Config indicated by + and applies to all files under models/example/
    # example:
      # +materialized: view
